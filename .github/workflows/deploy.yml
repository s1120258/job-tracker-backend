name: Simple Deploy to EC2

on:
  push:
    branches: ["main"]
  workflow_dispatch: {}

jobs:
  # Run tests first
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: docker compose version

      - name: Run Tests
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          ALGORITHM: ${{ secrets.ALGORITHM }}
        run: docker compose run --rm -e SECRET_KEY -e ALGORITHM backend sh -c "pytest"

      - name: Check formatting with Black
        run: docker compose run --rm backend sh -c "black --check ."

  # Build and push Docker image
  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ghcr.io/${{ github.repository }}:latest

  # Simple git pull deployment
  deploy:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd ~/res-match-api

            # Pull latest changes
            git pull origin main

            # Restart services to apply changes using production config
            docker-compose -f docker-compose.prod.yml down
            docker-compose -f docker-compose.prod.yml up -d

            # Wait for services to start
            sleep 10

            # Health check
            if curl -f http://localhost:8000/healthz; then
              echo "Deployment successful! Service is healthy."
            else
              echo "Deployment failed! Service health check failed."
              exit 1
            fi
