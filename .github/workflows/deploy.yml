name: Simple Deploy to EC2

on:
  push:
    branches: ["main"]
  workflow_dispatch: {}

permissions:
  contents: read
  packages: write

jobs:
  # Run tests first
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: docker compose version

      - name: Run Tests
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          ALGORITHM: ${{ secrets.ALGORITHM }}
        run: docker compose run --rm -e SECRET_KEY -e ALGORITHM backend sh -c "pytest"

      - name: Check formatting with Black
        run: docker compose run --rm backend sh -c "black --check ."

    # Build and push Docker image (only when code changes)
  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Check for code changes
        id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            code:
              - 'app/**'
              - 'requirements.txt'
              - 'Dockerfile'
              - 'Dockerfile.prod'
              - 'alembic.ini'
              - 'wait_for_db.sh'

      - name: Set up Docker Buildx
        if: steps.changes.outputs.code == 'true' || steps.changes.outputs.config == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: steps.changes.outputs.code == 'true' || steps.changes.outputs.config == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        if: steps.changes.outputs.code == 'true' || steps.changes.outputs.config == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ghcr.io/${{ github.repository }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Smart deployment based on changes
  deploy:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && always()
    permissions:
      contents: read
      packages: read

    steps:
      - uses: actions/checkout@v4

      - name: Check for changes
        id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            code:
              - 'app/**'
              - 'requirements.txt'
              - 'Dockerfile'
              - 'Dockerfile.prod'
              - 'alembic.ini'
              - 'wait_for_db.sh'
            config:
              - 'docker-compose.prod.yml'
              - '.env'
              - 'docs/**'

      - name: Deploy to EC2
        if: steps.changes.outputs.code == 'true' || steps.changes.outputs.config == 'true'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd ~/res-match-api

            # Pull latest changes
            git pull origin main

            # Check if we need to pull new image or just restart
            CODE_CHANGED="${{ steps.changes.outputs.code }}"

            if [ "$CODE_CHANGED" = "true" ]; then
              echo "Code changes detected - pulling new image and restarting"
              docker-compose -f docker-compose.prod.yml pull
              docker-compose -f docker-compose.prod.yml down
              docker-compose -f docker-compose.prod.yml up -d
            else
              echo "Config changes only - restarting services"
              docker-compose -f docker-compose.prod.yml restart api
            fi

            # Wait for services to start
            sleep 10

            # Health check
            if curl -f http://localhost:8000/healthz; then
              echo "Deployment successful! Service is healthy."
            else
              echo "Deployment failed! Service health check failed."
              exit 1
            fi

      - name: Skip deployment
        if: steps.changes.outputs.code != 'true' && steps.changes.outputs.config != 'true'
        run: echo "No relevant changes detected - skipping deployment"
